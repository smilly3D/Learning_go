package main

import (
	"fmt"
	"time"
)

// ğŸ“Œ Example01 â€“ Uso simples
func doDefer() {
	defer fmt.Println("world")
	fmt.Println("hello")
}

// ğŸ“Œ Example02 â€“ Ordem reversa de execuÃ§Ã£o
func deferReverseOrder() {
	defer fmt.Println("um")
	defer fmt.Println("dois")
	defer fmt.Println("trÃªs")
	fmt.Println("inÃ­cio")
}

// ğŸ“Œ Example03 â€“ Defer com funÃ§Ã£o anÃ´nima
func deferWithAnonymous() {
	defer func() {
		fmt.Println("fim da funÃ§Ã£o")
	}()
	fmt.Println("inÃ­cio da funÃ§Ã£o")
}

// ğŸ“Œ Example04 â€“ Executado mesmo com panic
func deferWithPanic() {
	defer fmt.Println("sempre executa, mesmo apÃ³s panic")
	panic("ocorreu um erro")
}

// ğŸ“Œ Example05 â€“ Medindo tempo de execuÃ§Ã£o
func trackTime(start time.Time, name string) {
	duration := time.Since(start)
	fmt.Printf("FunÃ§Ã£o %s demorou %s\n", name, duration)
}

func simulateWork() {
	defer trackTime(time.Now(), "simulateWork")
	time.Sleep(2 * time.Second)
}

// ğŸ§ª ExecuÃ§Ã£o dos exemplos
func main() {
	fmt.Println("Exemplos de uso do defer:")

	// doDefer()
	// deferReverseOrder()
	// deferWithAnonymous()
	// deferWithPanic()
	// simulateWork()
}
